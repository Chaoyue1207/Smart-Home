C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN i2c.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE system\iic\i2c.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\hardware\motor;
                    -.\system\delay;.\hardware\temperature;.\hardware\lumination;.\hardware\usart;.\hardware\display_lcd12864;.\hardware\disp
                    -lay_lcd1602;.\system\control;.\system\iic;.\system\timer;.\hardware\clock) DEBUG OBJECTEXTEND PRINT(.\i2c.lst) TABS(2) O
                    -BJECT(i2c.obj)

line level    source

   1          /*-----------------------------------------------
   2            名称：IIC协议 
   3            修改：无
   4            内容：函数是采用软件延时的方法产生SCL脉冲,固对高晶振频率要作 一定的修改....(本例是1us机器
   5              周期,即晶振频率要小于12MHZ)
   6          ------------------------------------------------*/  
   7            
   8                        
   9          #include "i2c.h"
  10          #include "delay.h"
  11          //#include"main.h"
  12          
  13                                   
  14          bit ack;                //应答标志位
  15          
  16          sbit SDA1=P2^0;
  17          sbit SCL=P2^1;
  18          
  19          /*------------------------------------------------
  20                              启动总线
  21          ------------------------------------------------*/
  22          void Start_I2c()
  23          {
  24   1        SDA1=1;   //发送起始条件的数据信号
  25   1        _Nop();
  26   1        SCL=1;
  27   1        _Nop();    //起始条件建立时间大于4.7us,延时
  28   1        _Nop();
  29   1        _Nop();
  30   1        _Nop();
  31   1        _Nop();    
  32   1        SDA1=0;     //发送起始信号
  33   1        _Nop();    //起始条件锁定时间大于4μ
  34   1        _Nop();
  35   1        _Nop();
  36   1        _Nop();
  37   1        _Nop();       
  38   1        SCL=0;    //钳住I2C总线，准备发送或接收数据
  39   1        _Nop();
  40   1        _Nop();
  41   1      }
  42          /*------------------------------------------------
  43                              结束总线
  44          ------------------------------------------------*/
  45          void Stop_I2c()
  46          {
  47   1        SDA1=0;    //发送结束条件的数据信号
  48   1        _Nop();   //发送结束条件的时钟信号
  49   1        SCL=1;    //结束条件建立时间大于4μ
  50   1        _Nop();
  51   1        _Nop();
  52   1        _Nop();
C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 2   

  53   1        _Nop();
  54   1        _Nop();
  55   1        SDA1=1;    //发送I2C总线结束信号
  56   1        _Nop();
  57   1        _Nop();
  58   1        _Nop();
  59   1        _Nop();
  60   1      }
  61          
  62          
  63          
  64          
  65          /*----------------------------------------------------------------
  66                           字节数据传送函数               
  67          函数原型: void  SendByte(unsigned char c);
  68          功能:  将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  69               此状态位进行操作.(不应答或非应答都使ack=0 假)     
  70               发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  71          ------------------------------------------------------------------*/
  72          void  SendByte(unsigned char c)
  73          {
  74   1       unsigned char BitCnt;
  75   1       
  76   1       for(BitCnt=0;BitCnt<8;BitCnt++)  //要传送的数据长度为8位
  77   1          {
  78   2           if((c<<BitCnt)&0x80)SDA1=1;   //判断发送位
  79   2             else  SDA1=0;                
  80   2           _Nop();
  81   2           SCL=1;               //置时钟线为高，通知被控器开始接收数据位
  82   2            _Nop(); 
  83   2            _Nop();             //保证时钟高电平周期大于4μ
  84   2            _Nop();
  85   2            _Nop();
  86   2            _Nop();         
  87   2           SCL=0; 
  88   2          }
  89   1          
  90   1          _Nop();
  91   1          _Nop();
  92   1          SDA1=1;               //8位发送完后释放数据线，准备接收应答位
  93   1          _Nop();
  94   1          _Nop();   
  95   1          SCL=1;
  96   1          _Nop();
  97   1          _Nop();
  98   1          _Nop();
  99   1          if(SDA1==1)ack=0;     
 100   1             else ack=1;        //判断是否接收到应答信号
 101   1          SCL=0;
 102   1          _Nop();
 103   1          _Nop();
 104   1      }
 105          
 106          
 107          
 108          
 109          
 110          
 111          
 112          /*----------------------------------------------------------------
 113                           字节数据传送函数               
 114          函数原型: unsigned char  RcvByte();
C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 3   

 115          功能:  用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
 116               发完后请用应答函数。  
 117          ------------------------------------------------------------------*/  
 118          unsigned char  RcvByte()
 119          {
 120   1        unsigned char retc;
 121   1        unsigned char BitCnt;
 122   1        
 123   1        retc=0; 
 124   1        SDA1=1;             //置数据线为输入方式
 125   1        for(BitCnt=0;BitCnt<8;BitCnt++)
 126   1            {
 127   2              _Nop();           
 128   2              SCL=0;       //置时钟线为低，准备接收数据位
 129   2              _Nop();
 130   2              _Nop();      //时钟低电平周期大于4.7us
 131   2              _Nop();
 132   2              _Nop();
 133   2              _Nop();
 134   2              SCL=1;       //置时钟线为高使数据线上数据有效
 135   2              _Nop();
 136   2              _Nop();
 137   2              retc=retc<<1;
 138   2              if(SDA1==1)retc=retc+1; //读数据位,接收的数据位放入retc中
 139   2              _Nop();
 140   2              _Nop(); 
 141   2            }
 142   1        SCL=0;    
 143   1        _Nop();
 144   1        _Nop();
 145   1        return(retc);
 146   1      }
 147          
 148          
 149          
 150          /*----------------------------------------------------------------
 151                               应答子函数
 152          原型:  void Ack_I2c(void);
 153           
 154          ----------------------------------------------------------------*/
 155          /*void Ack_I2c(void)
 156          {
 157            
 158            SDA=0;     
 159            _Nop();
 160            _Nop();
 161            _Nop();      
 162            SCL=1;
 163            _Nop();
 164            _Nop();              //时钟低电平周期大于4μ
 165            _Nop();
 166            _Nop();
 167            _Nop();  
 168            SCL=0;               //清时钟线，钳住I2C总线以便继续接收
 169            _Nop();
 170            _Nop();    
 171          }*/
 172          /*----------------------------------------------------------------
 173                               非应答子函数
 174          原型:  void NoAck_I2c(void);
 175           
 176          ----------------------------------------------------------------*/
C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 4   

 177          void NoAck_I2c(void)
 178          {
 179   1        
 180   1        SDA1=1;
 181   1        _Nop();
 182   1        _Nop();
 183   1        _Nop();      
 184   1        SCL=1;
 185   1        _Nop();
 186   1        _Nop();              //时钟低电平周期大于4μ
 187   1        _Nop();
 188   1        _Nop();
 189   1        _Nop();  
 190   1        SCL=0;                //清时钟线，钳住I2C总线以便继续接收
 191   1        _Nop();
 192   1        _Nop();    
 193   1      }
 194          
 195          
 196          
 197          
 198          
 199          
 200          /*----------------------------------------------------------------
 201                              向无子地址器件发送字节数据函数               
 202          函数原型: bit  ISendByte(unsigned char sla,ucahr c);  
 203          功能:     从启动总线到发送地址，数据，结束总线的全过程,从器件地址sla.
 204                     如果返回1表示操作成功，否则操作有误。
 205          注意：    使用前必须已结束总线。
 206          ----------------------------------------------------------------*/
 207          bit ISendByte(unsigned char sla,unsigned char c)
 208          {
 209   1         Start_I2c();               //启动总线
 210   1         SendByte(sla);             //发送器件地址
 211   1           if(ack==0)return(0);
 212   1         SendByte(c);               //发送数据
 213   1           if(ack==0)return(0);
 214   1        Stop_I2c();                 //结束总线
 215   1        return(1);
 216   1      }
 217          /**/
 218          
 219          /*----------------------------------------------------------------
 220                              向有子地址器件发送多字节数据函数               
 221          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 222          功能:     从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 223                    地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 224                     如果返回1表示操作成功，否则操作有误。
 225          注意：    使用前必须已结束总线。
 226          ----------------------------------------------------------------*/
 227          bit ISendStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 228          {
 229   1         unsigned char i;
 230   1       for(i=0;i<no;i++)
 231   1          { 
 232   2         Start_I2c();               //启动总线
 233   2         SendByte(sla);             //发送器件地址
 234   2           if(ack==0)return(0);
 235   2         SendByte(suba);            //发送器件子地址
 236   2           if(ack==0)return(0); 
 237   2       
 238   2           SendByte(*s);            //发送数据
C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 5   

 239   2             if(ack==0)return(0);
 240   2           Stop_I2c();                  //结束总线
 241   2         DelayMs(1);               //必须延时等待芯片内部自动处理数据完毕
 242   2         s++;
 243   2         suba++;
 244   2          } 
 245   1        return(1);
 246   1      }
 247          /**/
 248          /*----------------------------------------------------------------
 249                              向无子地址器件读字节数据函数               
 250          函数原型: bit  IRcvByte(unsigned char sla,ucahr *c);  
 251          功能:     从启动总线到发送地址，读数据，结束总线的全过程,从器件地
 252                    址sla，返回值在c.
 253                     如果返回1表示操作成功，否则操作有误。
 254          注意：    使用前必须已结束总线。
 255          ----------------------------------------------------------------*/
 256          bit IRcvByte(unsigned char sla,unsigned char *c)
 257          {
 258   1         Start_I2c();                //启动总线
 259   1         SendByte(sla+1);            //发送器件地址
 260   1           if(ack==0)return(0);
 261   1         *c=RcvByte();               //读取数据
 262   1           NoAck_I2c();              //发送非就答位
 263   1           Stop_I2c();               //结束总线
 264   1        return(1);
 265   1      }
 266          
 267          /**/
 268          /*----------------------------------------------------------------
 269                              向有子地址器件读取多字节数据函数               
 270          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 271          功能:     从启动总线到发送地址，子地址,读数据，结束总线的全过程,从器件
 272                    地址sla，子地址suba，读出的内容放入s指向的存储区，读no个字节。
 273                     如果返回1表示操作成功，否则操作有误。
 274          注意：    使用前必须已结束总线。
 275          ----------------------------------------------------------------*/
 276          bit IRcvStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 277          {
 278   1         unsigned char i;
 279   1      
 280   1         Start_I2c();               //启动总线
 281   1         SendByte(sla);             //发送器件地址
 282   1           if(ack==0)return(0);
 283   1         SendByte(suba);            //发送器件子地址
 284   1           if(ack==0)return(0);
 285   1      
 286   1         Start_I2c();
 287   1         SendByte(sla+1);
 288   1            if(ack==0)return(0);
 289   1      
 290   1        for(i=0;i<no-1;i++)
 291   1          { 
 292   2           *s=RcvByte();              //发送数据
 293   2            Ack_I2c();                //发送就答位 
 294   2           s++;
 295   2          } 
 296   1         *s=RcvByte();
 297   1          NoAck_I2c();                 //发送非应位
 298   1          Stop_I2c();                    //结束总线
 299   1        return(1);
 300   1      }
C51 COMPILER V9.60.0.0   I2C                                                               04/17/2022 15:44:50 PAGE 6   

 301          /**/
 302          /*******************************************************************************
 303          * 函数名         : void At24c02Write(unsigned char addr,unsigned char dat)
 304          * 函数功能       : 往24c02的一个地址写入一个数据
 305          * 输入           : 无
 306          * 输出           : 无
 307          *******************************************************************************/
 308          
 309          void At24c02Write(unsigned char addr,unsigned char dat)
 310          {
 311   1        Start_I2c();
 312   1        SendByte(0xa0);//发送写器件地址
 313   1        SendByte(addr);//发送要写入内存地址
 314   1        SendByte(dat);  //发送数据
 315   1        Stop_I2c();
 316   1      }
 317          /*******************************************************************************
 318          * 函数名         : unsigned char At24c02Read(unsigned char addr)
 319          * 函数功能       : 读取24c02的一个地址的一个数据
 320          * 输入           : 无
 321          * 输出           : 无
 322          *******************************************************************************/
 323          
 324          unsigned char At24c02Read(unsigned char addr)
 325          {
 326   1        unsigned char num;
 327   1        Start_I2c();
 328   1        SendByte(0xa0); //发送写器件地址
 329   1        SendByte(addr); //发送要读取的地址
 330   1        Start_I2c();
 331   1        SendByte(0xa1); //发送读器件地址
 332   1        num=RcvByte(); //读取数据
 333   1        Stop_I2c();
 334   1        return num; 
 335   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    519    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
